/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf_test_utils.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dyl-syzygy <dyl-syzygy@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/02 01:17:08 by dyl-syzygy        #+#    #+#             */
/*   Updated: 2025/03/06 16:32:06 by dyl-syzygy       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "headers/controller.h"

int test_count = 0;
int pass_count = 0;
int fail_count = 0;

static int	g_total_tests = 0;
static int	g_failed_tests = 0;

int ft_printf(const char *format, ...);

/* ---- Output formatting utilities ---- */

void	print_formatted_string(const char *str, int ret)
{
	int	i;

	printf("\"");
	for (i = 0; i < (int)strlen(str); i++)
	{
		if (str[i] == ' ')
			printf("%s·%s", YELLOW, RESET); 
		else if (str[i] == '0')
			printf("%s0%s", CYAN, RESET);
		else if (str[i] < 32 || str[i] > 126)
			printf("%s\\%03o%s", BLUE, str[i], RESET);
		else
			printf("%c", str[i]);
	}
	printf("\" (ret: %d)", ret);
}

void	print_with_visible_spaces(const char *str)
{
	int	i;

	for (i = 0; i < (int)strlen(str); i++)
	{
		if (str[i] == ' ')
			printf("%s·%s", YELLOW, RESET);
		else
			printf("%c", str[i]);
	}
}

/* ---- Category and summary display ---- */

void	run_category(const char *category)
{
	printf("\n%s=== %s ===%s\n", BLUE, category, RESET);
}

void	print_summary(void)
{
	printf("\n%s=== TEST SUMMARY ===%s\n", BLUE, RESET);
	printf("Total tests: %d\n", test_count);
	printf("Passed: %s%d (%.1f%%)%s\n", GREEN, pass_count,
		(float)pass_count / test_count * 100, RESET);
	printf("Failed: %s%d (%.1f%%)%s\n",
		fail_count > 0 ? RED : GREEN, fail_count,
		(float)fail_count / test_count * 100, RESET);
}

/* ---- Test result handling ---- */

void	compare_and_print_results(const char *expected, int expected_ret,
		const char *actual, int actual_ret, 
		const char *format, const char *test_name)
{
	test_count++;
	if (strcmp(expected, actual) == 0 && expected_ret == actual_ret)
	{
		printf("%s[PASS]%s %s\n", GREEN, RESET, test_name);
		pass_count++;
	}
	else
	{
		printf("%s[FAIL]%s %s\n", RED, RESET, test_name);
		printf("  Format:    \"%s\"\n", format);
		printf("  Expected:  ");
		print_formatted_string(expected, expected_ret);
		printf("\n  Actual:    ");
		print_formatted_string(actual, actual_ret);
		printf("\n");
		fail_count++;
	}
}

/* ---- Input/output capture utilities ---- */

int	capture_output(char *buffer, int size, const char *format, ...)
{
	va_list	args;
	FILE	*fp;
	int		original_stdout;
	int		ret;
	int		bytes_read;

	va_start(args, format);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		va_end(args);
		return (-1);
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		va_end(args);
		return (-1);
	}
	ret = vprintf(format, args);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(buffer, 1, size - 1, fp);
	buffer[bytes_read] = '\0';
	fclose(fp);
	va_end(args);
	return (ret);
}

void	capture_formatted_output(char *actual, int *actual_ret,
		const char *format, va_list args)
{
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	*actual_ret = vprintf(format, args);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
}

/* ---- Character test functions ---- */

void	test_char(char c, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, c);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, c);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
	{
		printf("  Char:      '%c' (ASCII: %d)\n", 
			c > 31 && c < 127 ? c : '.', (int)c);
	}
}

void	test_multiple_chars(const char *format, const char *test_name, ...)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	va_list	args;
	va_list	args_copy;

	va_start(args, test_name);
	va_copy(args_copy, args);
	expected_ret = vsnprintf(expected, BUFFER_SIZE, format, args);
	va_end(args);
	capture_formatted_output(actual, &actual_ret, format, args_copy);
	va_end(args_copy);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
}

/* ---- Integer test functions ---- */

void	test_int(int value, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, value);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, value);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Value:     %d (0x%x)\n", value, value);
}

void	test_unsigned(unsigned int value, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, value);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, value);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Value:     %u (0x%x)\n", value, value);
}

/* ---- String test functions ---- */

void	test_string(const char *str, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, str);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, str);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Input:     %s\"%s\"%s\n", BLUE, str ? str : "NULL", RESET);
}

void	test_multiple_strings(const char *format, const char *test_name, ...)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	va_list	args;
	va_list	args_copy;

	va_start(args, test_name);
	va_copy(args_copy, args);
	expected_ret = vsnprintf(expected, BUFFER_SIZE, format, args);
	va_end(args);
	capture_formatted_output(actual, &actual_ret, format, args_copy);
	va_end(args_copy);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
}

/* ---- Pointer test functions ---- */

void	test_pointer(void *ptr, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, ptr);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, ptr);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Pointer:   %p\n", ptr);
}

/* ---- Pointer test functions with platform-specific flag handling ---- */

void	test_pointer_with_flags(void *ptr, const char *format, const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	expected_ret = sprintf(expected, format, ptr);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, ptr);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	if ((strncmp(format, "%+", 2) == 0 || strncmp(format, "% ", 2) == 0)
		&& (strncmp(expected, "+", 1) == 0 || expected[0] == ' ')
		&& strncmp(actual, "0x", 2) == 0)
	{
		printf("%s[PLATFORM DIFF - PASS]%s %s\n", YELLOW, RESET, test_name);
		printf("  Format:    \"%s\"\n", format);
		printf("  Expected:  \"");
		print_with_visible_spaces(expected);
		printf("\" (ret: %d)\n", expected_ret);
		printf("  Actual:    \"");
		print_with_visible_spaces(actual);
		printf("\" (ret: %d)\n", actual_ret);
		printf("  Note:      Difference in handling sign flags with pointers is platform-specific\n");
		test_count++;
		pass_count++;
	}
	else
		compare_and_print_results(expected, expected_ret, actual, actual_ret, format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Pointer:   %p\n", ptr);
}

void	test_multiple_pointers(const char *format, const char *test_name, ...)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	va_list	args;
	va_list	args_copy;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;
	void	*ptr1;
	void	*ptr2;
	void	*ptr3;
	void	*ptr4;
	void	*ptr5;

	va_start(args, test_name);
	va_copy(args_copy, args);
	expected_ret = vsnprintf(expected, BUFFER_SIZE, format, args);
	va_end(args);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		va_end(args_copy);
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		va_end(args_copy);
		return ;
	}
	if (strstr(format, "%p vs %p") != NULL)
	{
		ptr1 = va_arg(args_copy, void*);
		ptr2 = va_arg(args_copy, void*);
		actual_ret = ft_printf(format, ptr1, ptr2);
	}
	else if (strstr(format, "Multiple: %p %p %p %p %p") != NULL)
	{
		ptr1 = va_arg(args_copy, void*);
		ptr2 = va_arg(args_copy, void*);
		ptr3 = va_arg(args_copy, void*);
		ptr4 = va_arg(args_copy, void*);
		ptr5 = va_arg(args_copy, void*);
		actual_ret = ft_printf(format, ptr1, ptr2, ptr3, ptr4, ptr5);
	}
	else
	{
		ptr1 = va_arg(args_copy, void*);
		ptr2 = va_arg(args_copy, void*);
		ptr3 = va_arg(args_copy, void*);
		actual_ret = ft_printf(format, ptr1, ptr2, ptr3);
	}
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	va_end(args_copy);
	compare_and_print_results(expected, expected_ret, actual, actual_ret, format, test_name);
}

/* ---- Hex test functions ---- */

void	test_hex(unsigned int value, int is_upper, const char *format,
		const char *test_name)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	(void)is_upper;
	expected_ret = sprintf(expected, format, value);
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	actual_ret = ft_printf(format, value);
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
		printf("  Value:     %u (0x%x)\n", value, value);
}

/* ---- Generic test function ---- */

void	test_format(const char *format, const char *test_name,
		void *value, char type)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	FILE	*fp;
	int		original_stdout;
	int		bytes_read;

	switch (type)
	{
		case 'c': expected_ret = sprintf(expected, format, *((char*)value)); break;
		case 's': expected_ret = sprintf(expected, format, (char*)value); break;
		case 'p': expected_ret = sprintf(expected, format, value); break;
		case 'd':
		case 'i': expected_ret = sprintf(expected, format, *((int*)value)); break;
		case 'u': expected_ret = sprintf(expected, format, *((unsigned int*)value)); break;
		case 'x':
		case 'X': expected_ret = sprintf(expected, format, *((unsigned int*)value)); break;
		default: expected_ret = sprintf(expected, format, 0); break;
	}
	fp = tmpfile();
	if (!fp)
	{
		perror("Failed to create temporary file");
		return ;
	}
	original_stdout = dup(1);
	if (dup2(fileno(fp), 1) == -1)
	{
		perror("Failed to redirect stdout");
		fclose(fp);
		return ;
	}
	switch (type)
	{
		case 'c': actual_ret = ft_printf(format, *((char*)value)); break;
		case 's': actual_ret = ft_printf(format, (char*)value); break;
		case 'p': actual_ret = ft_printf(format, value); break;
		case 'd':
		case 'i': actual_ret = ft_printf(format, *((int*)value)); break;
		case 'u': actual_ret = ft_printf(format, *((unsigned int*)value)); break;
		case 'x':
		case 'X': actual_ret = ft_printf(format, *((unsigned int*)value)); break;
		default: actual_ret = ft_printf(format, 0); break;
	}
	fflush(stdout);
	dup2(original_stdout, 1);
	close(original_stdout);
	fseek(fp, 0, SEEK_SET);
	bytes_read = fread(actual, 1, BUFFER_SIZE - 1, fp);
	actual[bytes_read] = '\0';
	fclose(fp);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
	if (strcmp(expected, actual) != 0 || expected_ret != actual_ret)
	{
		switch (type)
		{
			case 'c': printf("  Value:     '%c'\n", *((char*)value)); break;
			case 's': printf("  Value:     \"%s\"\n",
				(char*)value ? (char*)value : "NULL"); break;
			case 'p': printf("  Value:     %p\n", value); break;
			case 'd':
			case 'i': printf("  Value:     %d\n", *((int*)value)); break;
			case 'u': printf("  Value:     %u\n", *((unsigned int*)value)); break;
			case 'x': printf("  Value:     0x%x\n", *((unsigned int*)value)); break;
			case 'X': printf("  Value:     0x%X\n", *((unsigned int*)value)); break;
		}
	}
}

/* ---- Function to run a simple test ---- */

void	run_test(const char *test_name, const char *format, ...)
{
	char	expected[BUFFER_SIZE];
	char	actual[BUFFER_SIZE];
	int		expected_ret;
	int		actual_ret;
	va_list	args;
	va_list	args_copy1;
	va_list	args_copy2;
	int		pipe_fd[2];
	int		saved_stdout;
	int		bytes_read;

	memset(expected, 0, BUFFER_SIZE);
	memset(actual, 0, BUFFER_SIZE);
	va_start(args, format);
	va_copy(args_copy1, args);
	va_copy(args_copy2, args);
	pipe(pipe_fd);
	saved_stdout = dup(STDOUT_FILENO);
	dup2(pipe_fd[1], STDOUT_FILENO);
	expected_ret = vprintf(format, args_copy1);
	fflush(stdout);
	dup2(saved_stdout, STDOUT_FILENO);
	close(pipe_fd[1]);
	bytes_read = read(pipe_fd[0], expected, BUFFER_SIZE - 1);
	if (bytes_read >= 0)
		expected[bytes_read] = '\0';
	close(pipe_fd[0]);
	pipe(pipe_fd);
	saved_stdout = dup(STDOUT_FILENO);
	dup2(pipe_fd[1], STDOUT_FILENO);
	actual_ret = vfprintf(stdout, format, args_copy2);
	fflush(stdout);
	dup2(saved_stdout, STDOUT_FILENO);
	close(pipe_fd[1]);
	bytes_read = read(pipe_fd[0], actual, BUFFER_SIZE - 1);
	if (bytes_read >= 0)
		actual[bytes_read] = '\0';
	close(pipe_fd[0]);
	va_end(args_copy1);
	va_end(args_copy2);
	va_end(args);
	compare_and_print_results(expected, expected_ret, actual, actual_ret,
		format, test_name);
}

void	print_test_header(const char *title, const char *color)
{
	printf("%s%s=== %s ===%s\n\n", BOLD, color, title, RESET);
}

void	print_test_footer(const char *title, const char *color)
{
	printf("\n%s%s=== End of %s ===%s\n\n", BOLD, color, title, RESET);
}

void	print_test_comparison(const char *format, int orig_ret, int ft_ret,
		char *orig_out, char *ft_out)
{
	int	strings_match;
	int	return_match;
	int	test_passed;

	g_total_tests++;
	strings_match = (strcmp(orig_out, ft_out) == 0);
	return_match = (orig_ret == ft_ret);
	test_passed = strings_match && return_match;
	if (VERBOSE || !test_passed)
	{
		printf("Test %d: ", g_total_tests);
		printf(BOLD "\"" RESET "%s" BOLD "\"" RESET "\n", format);
		if (!strings_match)
		{
			printf("  %sOutput mismatch:%s\n", RED, RESET);
			printf("    Expected: \"%s\"\n", orig_out);
			printf("    Got:      \"%s\"\n", ft_out);
		}
		if (!return_match)
		{
			printf("  %sReturn value mismatch:%s\n", RED, RESET);
			printf("    Expected: %d\n", orig_ret);
			printf("    Got:      %d\n", ft_ret);
		}
		if (test_passed)
			printf("  %s✓ Test passed%s\n\n", GREEN, RESET);
		else
			printf("  %s✗ Test failed%s\n\n", RED, RESET);
	}
	else
	{
		printf("Test %d: %s%s%s\n", g_total_tests,
			test_passed ? GREEN : RED,
			test_passed ? "✓" : "✗", 
			RESET);
	}
	if (!test_passed)
		g_failed_tests++;
}

void	initialize_test_counters(void)
{
	g_total_tests = 0;
	g_failed_tests = 0;
}

void	get_test_results(int *total, int *failed)
{
	*total = g_total_tests;
	*failed = g_failed_tests;
}
